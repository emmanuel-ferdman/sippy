WITH current AS (
    SELECT 
        test_name,
        test_id,
        release,
        job_name,
        SUM(passes) AS passes,
        SUM(flakes) AS flakes,
        SUM(failures) AS failures,
        SUM(runs) AS runs
    FROM 
        test_analysis_by_job_by_dates
    WHERE 
        date >= CURRENT_DATE - INTERVAL '3 days' 
        AND date < CURRENT_DATE
    GROUP BY 
        test_name, test_id, release, job_name
),
previous AS (
    SELECT 
        test_id,
        SUM(passes) AS passes,
        SUM(flakes) AS flakes,
        SUM(failures) AS failures,
        SUM(runs) AS runs
    FROM 
        test_analysis_by_job_by_dates
    WHERE 
        date >= CURRENT_DATE - INTERVAL '5 days' 
        AND date < CURRENT_DATE - INTERVAL '3 days'
    GROUP BY 
        test_name, test_id, release, job_name
)
SELECT
    current.test_name,
    current.test_id,
    test_ownerships.suite,
    current.job_name,
    test_ownerships.jira_component,
    test_ownerships.jira_component_id,
    prow_jobs.variants,
    current.passes as current_successes,
    current.failures as current_failures,
    current.flakes as current_flakes,
    current.runs as current_runs,
    previous.passes as previous_successes,
    current.failures as current_failures,
    current.flakes as current_flakes,
    current.runs as current_runs
FROM 
    current
JOIN 
    previous 
ON 
    current.test_id = previous.test_id
LEFT JOIN
    test_ownerships
ON
    current.test_name = test_ownerships.name AND current.test_id = test_ownerships.test_id 
LEFT JOIN
    prow_jobs
ON
    current.job_name = prow_jobs.name AND current.release = prow_jobs.release




WITH current AS (
    SELECT
        test_name,
        test_id,
        release,
        job_name,
        SUM(passes) AS passes,
        SUM(flakes) AS flakes,
        SUM(failures) AS failures,
        SUM(runs) AS runs
    FROM
        test_analysis_by_job_by_dates
    WHERE
        date >= CURRENT_DATE - INTERVAL '11 days'
        AND date < CURRENT_DATE - INTERVAL '4 days'
    GROUP BY
        test_name, test_id, release, job_name
),
previous AS (
    SELECT
        test_id,
        SUM(passes) AS passes,
        SUM(flakes) AS flakes,
        SUM(failures) AS failures,
        SUM(runs) AS runs
    FROM
        test_analysis_by_job_by_dates
    WHERE
        date >= CURRENT_DATE - INTERVAL '18 days'
        AND date < CURRENT_DATE - INTERVAL '11 days'
    GROUP BY
        test_name, test_id, release, job_name
)
SELECT
    current.test_name,
    current.test_id,
    test_ownerships.suite,
    current.job_name,
    test_ownerships.jira_component,
    test_ownerships.jira_component_id,
    prow_jobs.variants,
    current.passes as current_successes,
    current.failures as current_failures,
    current.flakes as current_flakes,
    current.runs as current_runs,
    previous.passes as previous_successes,
    current.failures as current_failures,
    current.flakes as current_flakes,
    current.runs as current_runs
FROM
    current
JOIN
    previous
ON
    current.test_id = previous.test_id
LEFT JOIN
    test_ownerships
ON
    current.test_name = test_ownerships.name AND current.test_id = test_ownerships.test_id
LEFT JOIN
    prow_jobs
ON
    current.job_name = prow_jobs.name AND current.release = prow_jobs.release





WITH current AS (
    SELECT
        test_name,
        test_id,     
        release,
        job_name,
        SUM(passes) AS passes,
        SUM(flakes) AS flakes,
        SUM(failures) AS failures,
        SUM(runs) AS runs
    FROM
        test_analysis_by_job_by_dates
    WHERE
        date >= CURRENT_DATE - INTERVAL '11 days'
        AND date < CURRENT_DATE - INTERVAL '4 days'
    GROUP BY
        test_name, test_id, release, job_name
),
previous AS (
    SELECT
        test_id,
        SUM(passes) AS passes,
        SUM(flakes) AS flakes,  
        SUM(failures) AS failures,
        SUM(runs) AS runs
    FROM
        test_analysis_by_job_by_dates   
    WHERE
        date >= CURRENT_DATE - INTERVAL '18 days'
        AND date < CURRENT_DATE - INTERVAL '11 days'
    GROUP BY
        test_name, test_id, release, job_name
)
SELECT
    current.test_name,
    current.test_id,
    current.job_name,
    current.passes as current_successes,
    current.failures as current_failures,
    current.flakes as current_flakes,
    current.runs as current_runs,
    previous.passes as previous_successes,
    previous.failures as previous_failures,
    previous.flakes as previous_flakes,
    previous.runs as previous_runs
FROM
    current
JOIN
    previous
ON
    current.test_id = previous.test_id



WITH
  deduped_testcases AS (
  SELECT
    junit.*,
    ROW_NUMBER() OVER(PARTITION BY file_path, test_name, testsuite ORDER BY CASE WHEN flake_count > 0 THEN 0 WHEN success_val > 0 THEN 1 ELSE 2 END ) AS row_num,
    jobs.prowjob_job_name AS variant_registry_job_name,
    jobs.org,
    jobs.repo,
    jobs.pr_number,
    jobs.pr_sha,
    CASE
      WHEN flake_count > 0 THEN 0
      ELSE success_val
    END
    AS adjusted_success_val,
    CASE
      WHEN flake_count > 0 THEN 1
      ELSE 0
    END
    AS adjusted_flake_count
  FROM
    openshift-gce-devel.ci_analysis_us.junit
  INNER JOIN
    openshift-gce-devel.ci_analysis_us.jobs jobs
  ON
    junit.prowjob_build_id = jobs.prowjob_build_id
    AND DATE(jobs.prowjob_start) = CURRENT_DATE()
  WHERE
    DATE(junit.modified_time) = CURRENT_DATE() 
    AND skipped = FALSE ),
latest_component_mapping AS (
     SELECT *
     FROM openshift-gce-devel.ci_analysis_us.component_mapping cm
     WHERE created_at = (SELECT MAX(created_at) FROM openshift-gce-devel.ci_analysis_us.component_mapping)
)
current AS (
    SELECT 
        test_name,
        test_id,
        testsuite,
        branch as release,
        prowjob_name AS job_name,
        DATE(modified_time) AS date,
        COUNT(*) AS runs,
        SUM(adjusted_success_val) AS passes,
        SUM(adjusted_flake_count) AS flakes,
    FROM 
        deduped_testcases
    INNER JOIN latest_component_mapping cm ON testsuite = cm.suite AND test_name = cm.name
    WHERE 
        date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY) 
        AND date < CURRENT_DATE() AND row_num = 1
    GROUP BY 
        test_name, release, prowjob_name
),
previous AS (
    SELECT
        test_name,
        test_id,
        branch as release,
        prowjob_name AS job_name,
        DATE(modified_time) AS date,
        COUNT(*) AS runs,
        SUM(adjusted_success_val) AS passes,
        SUM(adjusted_flake_count) AS flakes,
    FROM
        deduped_testcases
    WHERE
        date >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)
        AND date < DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY) AND row_num = 1
    GROUP BY
        test_name, release, prowjob_name
),
SELECT
    current.test_name,
    current.test_id,
    current.job_name,
    current.passes as current_successes,
    current.failures as current_failures,
    current.flakes as current_flakes,
    current.runs as current_runs,
    previous.passes as previous_successes,
    previous.failures as previous_failures,
    previous.flakes as previous_flakes,
    previous.runs as previous_runs
FROM
    current
JOIN
    previous
ON
    current.test_id = previous.test_id




WITH
  deduped_testcases AS (
  SELECT
    junit.*,
    ROW_NUMBER() OVER(PARTITION BY file_path, test_name, testsuite ORDER BY CASE WHEN flake_count > 0 THEN 0 WHEN success_val > 0 THEN 1 ELSE 2 END ) AS row_num,
    jobs.prowjob_job_name AS variant_registry_job_name,
    jobs.org,
    jobs.repo,
    jobs.pr_number,
    jobs.pr_sha,
    jobs.prowjob_start as date,
    CASE
      WHEN flake_count > 0 THEN 0
      ELSE success_val
    END
    AS adjusted_success_val,
    CASE
      WHEN flake_count > 0 THEN 1
      ELSE 0
    END
    AS adjusted_flake_count
  FROM
    openshift-gce-devel.ci_analysis_us.junit
  INNER JOIN
    openshift-gce-devel.ci_analysis_us.jobs jobs
  ON
    junit.prowjob_build_id = jobs.prowjob_build_id
    AND DATE(jobs.prowjob_start) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)
    AND DATE(jobs.prowjob_start) < CURRENT_DATE()
  WHERE
    DATE(junit.modified_time) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)
    AND DATE(junit.modified_time) < CURRENT_DATE()
    AND skipped = FALSE 
  ),
latest_component_mapping AS (
     SELECT *
     FROM openshift-gce-devel.ci_analysis_us.component_mapping cm
     WHERE created_at = (SELECT MAX(created_at) FROM openshift-gce-devel.ci_analysis_us.component_mapping)
)
current_ AS (
    SELECT
        test_name,
        test_id,
        testsuite,
        branch as release,
        prowjob_name AS job_name,
        ANY_VALUE(cm.jira_component) AS jira_component,
        ANY_VALUE(cm.jira_component_id) AS jira_component_id,
        COUNT(*) AS runs,
        SUM(adjusted_success_val) AS passes,
        SUM(adjusted_flake_count) AS flakes,
    FROM
        deduped_testcases
    INNER JOIN latest_component_mapping cm ON testsuite = cm.suite AND test_name = cm.name
    WHERE
        date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY) 
        AND date < CURRENT_DATE() AND row_num = 1
    GROUP BY
        test_name, test_id, testsuite, release, prowjob_name
),
previous AS (
    SELECT
        test_name,
        test_id,
        branch as release,
        prowjob_name AS job_name,
        COUNT(*) AS runs,
        SUM(adjusted_success_val) AS passes,
        SUM(adjusted_flake_count) AS flakes,
    FROM
        deduped_testcases
    WHERE
        date >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)
        AND date < DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY) AND row_num = 1
    GROUP BY
        test_name, test_id, release, prowjob_name
)
SELECT
    current_.test_name,
    current_.test_id,
    current_.job_name,
    current_.jira_component,
    current_.jira_component_id,
    jv.*,
    current_.passes as current_successes,
    current_.flakes as current_flakes,
    current_.runs as current_runs,
    previous.passes as previous_successes,
    previous.flakes as previous_flakes,
    previous.runs as previous_runs
FROM
    current_
JOIN
    previous
ON
    current_.test_id = previous.test_id
LEFT JOIN openshift-gce-devel.ci_analysis_us.job_variants jv ON variant_registry_job_name = current_.job_name
LIMIT 1000;


  ARRAY_AGG(STRUCT(variant_name, variant_value)) AS variants

WITH job_variants AS (
     SELECT
          job_name,
          ARRAY_AGG(STRUCT(variant_name, variant_value)) AS variants
     FROM 
          openshift-gce-devel.ci_analysis_us.job_variants
     WHERE variant_value IS NOT NULL AND variant_value != ""
     GROUP BY 
          job_name
):w

